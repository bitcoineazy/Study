Обработка событий


у Button есть два события:
on_press(срабатывает при нажатии на кнопку) - если нажал кнопку и держу
on_release(срабатывает, когда опустили кнопки)
    FloatLayout:
        Button:
            text: 'Input'
            size_hint: 0.5, 0.4
            font_size: 40
            pos_hint: {'center_x': 0.5, 'y': 0.1}

            on_release:
                self.text = 'On release'
    # обращаемся к свойству self.text (self - текст у Button) и присваем ему = 'On release'
    # self работает как в python, указывает на конкретный объект класса
    # теперь, при нажатии и отпускании на кнопку её текст будет изменён на On release

Теперь хотим ввести текст в TextInput, нажать на кнопку и изменить состояние Label.
Практически это значит, что значения свойств из одного класса(одного виджета)
должно перейти в значение свойств другого класса(виджета):
.kv файл - только схема(киви парсит и создает по описанию нужные объекты),
виджеты описанные в этом файле напрямую между собой не связаны, они связаны с другом другом
опосредованно(по средстам чего-либо) через самого главного родителя - класс Container(корневой виджет)
и соответственно доступ к конкретным виджетам осуществляется через общего родителя - через Container (всё управления интерфейсом, данными)
класс Container - наблюдатель observer

При событие on_release(нажатие на кнопку) - текст из виджета TextInput попадал в виджет Label, т.е
из класса Container нужен прямой доступ к этим двум объектам, это делается при помощи свойств класса,
в которых значениями будут ссылки на нужные объекты.
Для этого в .kv файле:
<Container>:
    #указываем новое св-во
    new_property_text: text_input
    new_property_label: label
    #и указываем id у каждого виджета, чтобы подать в новое св-во, чтобы работать уже в python
    TextInput:
        id: text_input #id - не свойство класса, id используется парсером kivy для создания ссылок на конкретный объект
        ...
    Label:
        id: label #также назначаем id для label
        ...
    FloatLayout:
        Button:
            ...

Чтобы проверить id's можно через тест пройтись по атрибутту ids
>>> c = Container()
>>> c.ids
{'text_input': <WeakProxy to <kivy.uix.textinput.TextInput object at 0x0AB60140>>}
Получаем объект WeakProxy нашего TextInput, WeakProxy - слабая ссылка
WeakRef - разработчик получает доступ к конкретному объекту, но при этом garbagecollector эту ссылку не учитывает и в случае чего он эти объекты подчищает
Kivy на основе id создает ключ в словаре (observable_dict) и значения ставит слабую ссылку на объект
>>> for i in dir(c):
...     print(i)
...
>> ... 'new_property_text' ...
видим в списке атрибутов наше новое св-во new_property и смотрим, что мы описали
>>> c.new_property_text
<WeakProxy to <kivy.uix.textinput.TextInput object at 0x0AB60140>>
Также и с Label

Мы хотим чтобы по on_release запускалась определённый метод(функция):
FloatLayout:
        Button:
            on_release:
                #root указывает на виджет, который на вершине иерархии, т.е на Container
                #и прописываем функцию(change_text), которая должны быть в python файле у класса Container
                root.change_text()
python:

class Container(GridLayout):
    def change_text(self):
        #ставим текст у Label = тексту у TextInput
        #используя указанные нами новые свойства
        self.new_property_label.text = self.new_property_text.text

Но есть нюанс: так никто не пишет. Поскольку есть принцип явное лучше чем неявное.
В классе создаются нормальные свойства:
.kv:
<Container>:
    text_input: text_input
    label_widget: label
    ...
python:
class Container(GridLayout):
    #назначаем нормальные свойства, импортировав ObjectProperty
    #ObjectProperty - создает ссылку на объект в питоне(почти для всех типов данных)
    text_input = ObjectProperty()
    label_widget = ObjectProperty()
    def change_text(self):
        #ставим текст у Label = тексту у TextInput
        #используя указанные нами новые свойства
        self.label_widget.text = self.text_input.text

Всё тоже самое, но такая запись более явная, нам не приходится залезать в .kv файл, чтобы посмотреть
какие новые атрибуты мы прописали у главного класса и мы обеспечиваем себе
создание свойств определённого типа




